c_BankCommand.cpp:  std::cout << "[" << this << " Cycle:" <<  Simulation::getSimulation()->getCurrentSimCycle()
c_BankCommand.cpp:	x_debugOutput->verbose(CALL_INFO, 1, 0, "[BankCommand] Cycle:%ld," , Simulation::getSimulation()->getCurrentSimCycle());
c_BankCommand.cpp:							Simulation::getSimulation()->getCurrentSimCycle(),
c_Bank.cpp:  //<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_Bank.cpp://			<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankGroup.cpp:		SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankReceiver.cpp:					<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankReceiver.cpp:				<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateActivating.cpp:		// 		<< Simulation::getSimulation()->getCurrentSimCycle()
c_BankStateActive.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateActive.cpp:		SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateActive.cpp://				<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateActive.cpp:	//			<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateActive.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateActive.cpp://		<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateActive.cpp://			<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateIdle.cpp:			Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateIdle.cpp:						Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateIdle.cpp:	//	  << Simulation::getSimulation()->getCurrentSimCycle()
c_BankStateIdle.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStatePrecharge.cpp:		//	  << Simulation::getSimulation()->getCurrentSimCycle()
c_BankStatePrecharge.cpp:	//	  << Simulation::getSimulation()->getCurrentSimCycle()
c_BankStateReadA.cpp:			SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateReadA.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateRead.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateRead.cpp://			<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateRead.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateRead.cpp://				<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateRead.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateRefresh.cpp:		// 		<< Simulation::getSimulation()->getCurrentSimCycle()
c_BankStateRefresh.cpp://				<< Simulation::getSimulation()->getCurrentSimCycle()
c_BankStateRefresh.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateWriteA.cpp:			SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateWriteA.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateWrite.cpp:		SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateWrite.cpp://				<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateWrite.cpp://			<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateWrite.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_BankStateWrite.cpp:  //			<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateWrite.cpp:		//		<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_BankStateWrite.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_Channel.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_CmdDriver.cpp:				<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_CmdScheduler.cpp:    SimTime_t  l_time=Simulation::getSimulation()->getCurrentSimCycle();
c_DeviceDriver.cpp://		output->verbose(CALL_INFO,2,0,"[cycle:%lld] low command issue rate",Simulation::getSimulation()->getCurrentSimCycle());
c_DeviceDriver.cpp:	SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_DeviceDriver.cpp:							   (Simulation::getSimulation()->getCurrentSimCycle() - m_lastDataCmdIssueCycle) >=
c_DeviceDriver.cpp:						m_lastDataCmdIssueCycle = Simulation::getSimulation()->getCurrentSimCycle();
c_DeviceDriver.cpp:    SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_DeviceDriver.cpp:    SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_DeviceDriver.cpp:				  << Simulation::getSimulation()->getCurrentSimCycle()
c_DeviceDriver.cpp:				  << Simulation::getSimulation()->getCurrentSimCycle()
c_DeviceDriver.cpp:				    Simulation::getSimulation()->getCurrentSimCycle(),
c_Dimm.cpp://			<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_Dimm.cpp://				<< Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_Dimm.cpp:	  //	    << Simulation::getSimulation()->getCurrentSimCycle() << ": "
c_DramSimTraceReader.cpp://		 		<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_DramSimTraceReader.cpp://		 		<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_DramSimTraceReader.cpp:					>= Simulation::getSimulation()->getCurrentSimCycle()) {
c_DramSimTraceReader.hpp:				<< std::dec << static_cast<double>(Simulation::getSimulation()->getCurrentSimCycle())
c_MemhBridge.cpp:    uint64_t l_cycle = Simulation::getSimulation()->getCurrentSimCycle();
c_MemhBridge.cpp:    uint64_t l_currentCycle = Simulation::getSimulation()->getCurrentSimCycle();
c_Rank.cpp:      SimTime_t l_time = Simulation::getSimulation()->getCurrentSimCycle();
c_TracefileReader.cpp:				<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_TracefileReader.cpp:				<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_Transaction.cpp:				  Simulation::getSimulation()->getCurrentSimCycle(),
c_TxnDispatcher.cpp:             Simulation::getSimulation()->getCurrentSimCycle(),m_laneIdxEnd,m_laneIdxStart,l_addr,l_laneIdx);
c_TxnDriver.cpp:				<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_TxnDriver.cpp:				<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_TxnGen.cpp:        uint64_t l_currentCycle = Simulation::getSimulation()->getCurrentSimCycle();
c_TxnGen.cpp:        uint64_t l_cycle=Simulation::getSimulation()->getCurrentSimCycle();
c_TxnGen.cpp:    uint64_t l_cycle = Simulation::getSimulation()->getCurrentSimCycle();
c_TxnGen.hpp:                          << std::dec << static_cast<double>(Simulation::getSimulation()->getCurrentSimCycle())
c_TxnGen.hpp:                double l_txnsPerCycle=  static_cast<double>(m_resReadCount + m_resWriteCount) /static_cast<double>(Simulation::getSimulation()->getCurrentSimCycle());
c_TxnGenRand.cpp:		 //		<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_TxnGenRand.hpp:				  << std::dec << static_cast<double>(Simulation::getSimulation()->getCurrentSimCycle())
c_TxnGenSeq.cpp:	//			<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_TxnGenSeq.cpp://				<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_USimmTraceReader.cpp:		// 		<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_USimmTraceReader.cpp:		// 		<< Simulation::getSimulation()->getCurrentSimCycle() << " "
c_USimmTraceReader.hpp:		printf("Total Cycles: %" PRIu64 "\n", Simulation::getSimulation()->getCurrentSimCycle());
